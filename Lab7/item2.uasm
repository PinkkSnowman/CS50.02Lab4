.include beta.uasm

        LD(r31, DATA, r0)   | r0 = length of array

        BEQ(r0, END)           | Check if the array has 0 or 1 element

        ADDC(r2, 4, r2)      | r2 = address of the first element
        ADDC(r3, 20, r3)     | r3 = address of the last element

REVERSE_LOOP:
        LD(r2, DATA, r4)     | r4 = value of the first element
        LD(r3, DATA, r5)     | r5 = value of the last element

        ST(r5, DATA, r2)     | Swap: store the last element value in the first element
        ST(r4, DATA, r3)     | Swap: store the first element value in the last element

        ADDC(r2, 4, r2)      | Move to the next element from the start
        SUBC(r3, 4, r3)      | Move to the next element from the end

        CMPLE(r3, r2, r30)   | Check if we have not crossed the middle of the array
        BEQ(r30, REVERSE_LOOP)    | Continue the loop if not crossed

END:    HALT()

| DATA marks the beginning of user data in memory.
DATA:   LONG(5)             | length of the array
        LONG(3)
        LONG(-5)
        LONG(12)
        LONG(-14)
        LONG(1)
