.include beta.uasm          | include the standard predefined macros

        LD(r31, DATA, r0)   | r0 = length of array
        ADDC(r1, 4, r1)     | adds 4 to r1 (main memory address)
        ST(r4, DATA, r1)    | r1 = 4, adds r1 to DATA to determine address to be written to, stores r4 (0) to that address
        SUBC(r0, 1, r0)     | decrements r0 indicating next step
        BEQ(r0, END)        | checks if r0 = 0, ends if yes
        ADDC(r1, 4, r1)     | adds 4 to r1 (main memory address)
        ADDC(r4, 1, r4)     | adds 1 to r4
        ST(r4, DATA, r1)    | r1 = 8, adds r1 to DATA to determine address to be written to, stores r4 (1) to that address
        SUBC(r0, 1, r0)     | decrements r0 indicating next step
        BEQ(r0, END)        | checks if r0 = 0, ends if yes
LOOP:   ADDC(r1,4,r1)       | r1 is the pointer to where the next spot in the sequence to fill
        ADDC(r2,4,r2)       | r2 is the pointer to the integer to be added to the last integer
        LD(r2, DATA, r3)    | r2 + DATA = EA that would be stored in r3
        ADD(r4, r3, r4)     | r3 (2nd to last) adds to r4 (last)
        ST(r4, DATA, r1)    | r4 will be stored to Address specified by DATA + r1
        SUBC(r0, 1, r0)     | decrements r0 indicating next step
        BNE(r0, LOOP)       | Loops back if r0 != 0
END:    HALT()
  
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

| DATA marks the beginning of user data in memory.
DATA:   LONG(10)             | length of the array
        